# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AdminGame.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import requests
import json
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_AdminGameWindow(object):
    def setupUi(self, AdminGameWindow):
        AdminGameWindow.setObjectName("AdminGameWindow")
        AdminGameWindow.resize(1000, 800)
        AdminGameWindow.setMinimumSize(QtCore.QSize(500, 500))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../image/游戏.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        AdminGameWindow.setWindowIcon(icon)
        AdminGameWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        AdminGameWindow.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.centralwidget = QtWidgets.QWidget(AdminGameWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.all_table = QtWidgets.QTableWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(4)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(self.all_table.sizePolicy().hasHeightForWidth())
        self.all_table.setSizePolicy(sizePolicy)
        self.all_table.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.all_table.setDragDropMode(QtWidgets.QAbstractItemView.NoDragDrop)
        self.all_table.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
        self.all_table.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.all_table.setObjectName("all_table")
        self.all_table.setColumnCount(8)
        self.all_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.all_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.all_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.all_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.all_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.all_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.all_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.all_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.all_table.setHorizontalHeaderItem(7, item)

        self.all_table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.all_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

        self.delete_button = QtWidgets.QPushButton()
        self.delete_button = []
        url = 'https://stepic-api.redcountry.top/api/game/query_all'
        res = requests.post(url=url, data='')
        if res.text != 'empty':
            self.all_table.verticalHeader().setVisible(False)
            games = json.loads(res.text)
            index = 0
            for game in games:
                self.all_table.setRowCount(index + 1)
                item = QtWidgets.QTableWidgetItem(str(game['gid']))
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.all_table.setItem(index, 0, item)
                item = QtWidgets.QTableWidgetItem(game['gname'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.all_table.setItem(index, 1, item)
                item = QtWidgets.QTableWidgetItem(game['image'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.all_table.setItem(index, 2, item)
                item = QtWidgets.QTableWidgetItem(game['fileurl'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.all_table.setItem(index, 3, item)
                item = QtWidgets.QTableWidgetItem(game['dname'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.all_table.setItem(index, 4, item)
                item = QtWidgets.QTableWidgetItem(game['note'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.all_table.setItem(index, 5, item)
                item = QtWidgets.QTableWidgetItem(game['status'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.all_table.setItem(index, 6, item)
                frame = QtWidgets.QFrame()
                layout = QtWidgets.QVBoxLayout(frame)
                delete_button = QtWidgets.QPushButton(frame)
                delete_button.setText('删除')
                delete_button.setObjectName('delete_button_' + str(index))
                delete_button.game = game
                delete_button.id = index
                self.delete_button.append(delete_button)
                layout.addWidget(delete_button, 0, QtCore.Qt.AlignVCenter)
                self.all_table.setCellWidget(index, 7, frame)
                self.all_table.setRowHeight(index, 50)
                index += 1

        self.gridLayout.addWidget(self.all_table, 1, 0, 1, 4)
        self.search_Edit = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.search_Edit.sizePolicy().hasHeightForWidth())
        self.search_Edit.setSizePolicy(sizePolicy)
        self.search_Edit.setMinimumSize(QtCore.QSize(21, 31))
        self.search_Edit.setMaximumSize(QtCore.QSize(16777215, 31))
        self.search_Edit.setObjectName("search_Edit")
        self.gridLayout.addWidget(self.search_Edit, 0, 1, 1, 1)
        self.review_table = QtWidgets.QTableWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(4)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(self.review_table.sizePolicy().hasHeightForWidth())
        self.review_table.setSizePolicy(sizePolicy)
        self.review_table.setObjectName("review_table")
        self.review_table.setColumnCount(8)
        self.review_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.review_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.review_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.review_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.review_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.review_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.review_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.review_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.review_table.setHorizontalHeaderItem(7, item)

        self.review_table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.review_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

        self.success_button = QtWidgets.QPushButton()
        self.failed_button = QtWidgets.QPushButton()
        self.success_button = []
        self.failed_button = []
        url_1 = 'https://stepic-api.redcountry.top/api/game/query_all_check'
        res_1 = requests.post(url=url_1, data='')
        if res_1.text != 'empty':
            self.review_table.verticalHeader().setVisible(False)
            games = json.loads(res_1.text)
            index = 0
            for game in games:
                self.review_table.setRowCount(index + 1)
                item = QtWidgets.QTableWidgetItem(str(game['gid']))
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.review_table.setItem(index, 0, item)
                item = QtWidgets.QTableWidgetItem(game['gname'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.review_table.setItem(index, 1, item)
                item = QtWidgets.QTableWidgetItem(game['image'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.review_table.setItem(index, 2, item)
                item = QtWidgets.QTableWidgetItem(game['fileurl'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.review_table.setItem(index, 3, item)
                item = QtWidgets.QTableWidgetItem(game['dname'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.review_table.setItem(index, 4, item)
                item = QtWidgets.QTableWidgetItem(game['note'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.review_table.setItem(index, 5, item)
                item = QtWidgets.QTableWidgetItem(game['status'])
                item.setTextAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
                self.review_table.setItem(index, 6, item)
                frame = QtWidgets.QFrame()
                layout = QtWidgets.QVBoxLayout(frame)
                success_button = QtWidgets.QPushButton(frame)
                success_button.setText('审核通过')
                success_button.setObjectName('success_button_' + str(index))
                success_button.game = game
                success_button.id = index
                failed_button = QtWidgets.QPushButton(frame)
                failed_button.setText('审核不通过')
                failed_button.setObjectName('failed_button_' + str(index))
                failed_button.game = game
                failed_button.id = index
                self.success_button.append(success_button)
                self.failed_button.append(failed_button)
                layout.addWidget(success_button, 0, QtCore.Qt.AlignVCenter)
                layout.addWidget(failed_button, 0, QtCore.Qt.AlignVCenter)
                self.review_table.setCellWidget(index, 7, frame)
                self.review_table.setRowHeight(index, 90)
                index += 1

        self.gridLayout.addWidget(self.review_table, 2, 0, 1, 4)
        self.menu_Button = QtWidgets.QToolButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.menu_Button.sizePolicy().hasHeightForWidth())
        self.menu_Button.setSizePolicy(sizePolicy)
        self.menu_Button.setMinimumSize(QtCore.QSize(201, 31))
        self.menu_Button.setMaximumSize(QtCore.QSize(201, 31))
        self.menu_Button.setIcon(icon)
        self.menu_Button.setPopupMode(QtWidgets.QToolButton.MenuButtonPopup)
        self.menu_Button.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.menu_Button.setObjectName("menu_Button")

        self.menu_Button.setAutoRaise(True)
        self.menu = QtWidgets.QMenu()

        self.logout = QtWidgets.QAction('注销帐户:', parent=self.menu)
        self.exit_button = QtWidgets.QAction('退出系统', parent=self.menu)

        self.menu.addAction(self.logout)
        self.menu.addSeparator()
        self.menu.addAction(self.exit_button)
        self.menu_Button.setMenu(self.menu)

        self.gridLayout.addWidget(self.menu_Button, 0, 3, 1, 1, QtCore.Qt.AlignRight|QtCore.Qt.AlignTop)
        self.logo = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.logo.sizePolicy().hasHeightForWidth())
        self.logo.setSizePolicy(sizePolicy)
        self.logo.setMinimumSize(QtCore.QSize(350, 200))
        self.logo.setMaximumSize(QtCore.QSize(350, 200))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap("../image/游戏大logo.png"))
        self.logo.setAlignment(QtCore.Qt.AlignCenter)
        self.logo.setObjectName("logo")
        self.gridLayout.addWidget(self.logo, 0, 0, 1, 1)
        self.search_Button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.search_Button.sizePolicy().hasHeightForWidth())
        self.search_Button.setSizePolicy(sizePolicy)
        self.search_Button.setMinimumSize(QtCore.QSize(31, 31))
        self.search_Button.setMaximumSize(QtCore.QSize(31, 31))
        self.search_Button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../image/search.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.search_Button.setIcon(icon1)
        self.search_Button.setObjectName("search_Button")
        self.gridLayout.addWidget(self.search_Button, 0, 2, 1, 1)
        AdminGameWindow.setCentralWidget(self.centralwidget)

        self.setWindowOpacity(0.95)  # 设置窗口透明度
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 设置窗口背景透明
        # self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框

        self.retranslateUi(AdminGameWindow)
        QtCore.QMetaObject.connectSlotsByName(AdminGameWindow)

    def retranslateUi(self, AdminGameWindow):
        _translate = QtCore.QCoreApplication.translate
        AdminGameWindow.setWindowTitle(_translate("AdminGameWindow", "Stepic 管理员管理游戏界面"))
        item = self.all_table.horizontalHeaderItem(0)
        item.setText(_translate("AdminGameWindow", "游戏ID"))
        item = self.all_table.horizontalHeaderItem(1)
        item.setText(_translate("AdminGameWindow", "游戏名"))
        item = self.all_table.horizontalHeaderItem(2)
        item.setText(_translate("AdminGameWindow", "游戏图片"))
        item = self.all_table.horizontalHeaderItem(3)
        item.setText(_translate("AdminGameWindow", "游戏文件"))
        item = self.all_table.horizontalHeaderItem(4)
        item.setText(_translate("AdminGameWindow", "上传者"))
        item = self.all_table.horizontalHeaderItem(5)
        item.setText(_translate("AdminGameWindow", "游戏介绍"))
        item = self.all_table.horizontalHeaderItem(6)
        item.setText(_translate("AdminGameWindow", "状态"))
        item = self.all_table.horizontalHeaderItem(7)
        item.setText(_translate("AdminGameWindow", "操作"))
        item = self.review_table.horizontalHeaderItem(0)
        item.setText(_translate("AdminGameWindow", "游戏ID"))
        item = self.review_table.horizontalHeaderItem(1)
        item.setText(_translate("AdminGameWindow", "游戏名"))
        item = self.review_table.horizontalHeaderItem(2)
        item.setText(_translate("AdminGameWindow", "游戏图片"))
        item = self.review_table.horizontalHeaderItem(3)
        item.setText(_translate("AdminGameWindow", "游戏文件"))
        item = self.review_table.horizontalHeaderItem(4)
        item.setText(_translate("AdminGameWindow", "上传者"))
        item = self.review_table.horizontalHeaderItem(5)
        item.setText(_translate("AdminGameWindow", "游戏介绍"))
        item = self.review_table.horizontalHeaderItem(6)
        item.setText(_translate("AdminGameWindow", "状态"))
        item = self.review_table.horizontalHeaderItem(7)
        item.setText(_translate("AdminGameWindow", "操作"))
        self.menu_Button.setText(_translate("AdminGameWindow", "..."))

def keyPressEvent(self, event):
    """ Ctrl + C复制表格内容 """
    if event.modifiers() == QtCore.Qt.ControlModifier and event.key() == QtCore.Qt.Key_C:
        # 获取表格的选中行
        selected_ranges = self.show_table.selectedRanges()[0]  # 只取第一个数据块,其他的如果需要要做遍历,简单功能就不写得那么复杂了
        text_str = ""  # 最后总的内容
        # 行（选中的行信息读取）
        for row in range(selected_ranges.topRow(), selected_ranges.bottomRow() + 1):
            row_str = ""
            # 列（选中的列信息读取）
            for col in range(selected_ranges.leftColumn(), selected_ranges.rightColumn() + 1):
                item = self.show_table.item(row, col)
                row_str += item.text() + '\t'  # 制表符间隔数据
            text_str += row_str + '\n'  # 换行
        clipboard = QtWidgets.qApp.clipboard()  # 获取剪贴板
        clipboard.setText(text_str)  # 内容写入剪贴板
